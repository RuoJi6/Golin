name: Build and Release

on:
  push:
    tags:
      - 'v*'  # ÂΩìÊé®ÈÄÅ‰ª• v ÂºÄÂ§¥ÁöÑÊ†áÁ≠æÊó∂Ëß¶ÂèëÔºåÂ¶Ç v1.0.0
  workflow_dispatch:  # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

env:
  GO_VERSION: '1.23'
  PROJECT_NAME: 'golin'

jobs:
  build:
    name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # ‰∏çË¶ÅÂõ†‰∏∫‰∏Ä‰∏™Â§±Ë¥•Â∞±ÂèñÊ∂àÊâÄÊúâÊûÑÂª∫
      matrix:
        include:
          # Windows builds
          - goos: windows
            goarch: amd64
            os: windows-latest
            ext: '.exe'

          - goos: windows
            goarch: arm64
            os: windows-latest
            ext: '.exe'

          # Linux builds
          - goos: linux
            goarch: amd64
            os: ubuntu-latest
            ext: ''

          - goos: linux
            goarch: arm64
            os: ubuntu-latest
            ext: ''

          # macOS builds
          - goos: darwin
            goarch: amd64
            os: macos-13  # ‰ΩøÁî®Á®≥ÂÆöÁöÑ macOS ÁâàÊú¨
            ext: ''

          - goos: darwin
            goarch: arm64
            os: macos-14  # ‰ΩøÁî®ÊîØÊåÅ ARM64 ÁöÑ macOS ÁâàÊú¨
            ext: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: go mod download

    - name: Verify Go installation
      run: |
        go version
        go env GOOS GOARCH

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
        mkdir -p dist
        go build -v -ldflags="-s -w" -o dist/${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }} .
        ls -la dist/

    - name: Create archive (Windows)
      if: matrix.goos == 'windows'
      run: |
        cd dist
        7z a ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}

    - name: Create archive (Unix)
      if: matrix.goos != 'windows'
      run: |
        cd dist
        tar -czf ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          dist/${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          dist/${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
        retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && always()  # Âç≥‰ΩøÈÉ®ÂàÜÊûÑÂª∫Â§±Ë¥•‰πüÁªßÁª≠
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      continue-on-error: true

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        echo "Available artifacts:"
        find artifacts -type f 2>/dev/null || echo "No artifacts directory found"

        # Â§çÂà∂ÊâÄÊúâÂèØÁî®ÁöÑÂéãÁº©ÂåÖ
        find artifacts -name "*.zip" -o -name "*.tar.gz" 2>/dev/null | while read file; do
          echo "Copying: $file"
          cp "$file" release-assets/ 2>/dev/null || echo "Failed to copy $file"
        done

        echo "Release assets:"
        ls -la release-assets/ || echo "No release assets found"

    - name: Generate checksums
      run: |
        cd release-assets
        if [ "$(ls -A .)" ]; then
          sha256sum * > checksums.txt
          echo "Generated checksums:"
          cat checksums.txt
        else
          echo "No files to generate checksums for"
          echo "# No release assets available" > checksums.txt
        fi

    - name: Get tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Check if we have assets to release
      id: check_assets
      run: |
        cd release-assets
        if [ "$(ls -A . | grep -v checksums.txt)" ]; then
          echo "has_assets=true" >> $GITHUB_OUTPUT
          echo "Found assets to release"
        else
          echo "has_assets=false" >> $GITHUB_OUTPUT
          echo "No assets found to release"
        fi

    - name: Create Release
      if: steps.check_assets.outputs.has_assets == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          release-assets/*
        body: |
          ## üöÄ Release ${{ steps.tag.outputs.tag }}
          
          ### üì¶ Downloads
          
          Choose the appropriate binary for your platform:
          
          #### Windows
          - **AMD64**: `${{ env.PROJECT_NAME }}-windows-amd64.zip`
          - **ARM64**: `${{ env.PROJECT_NAME }}-windows-arm64.zip`
          
          #### Linux
          - **AMD64**: `${{ env.PROJECT_NAME }}-linux-amd64.tar.gz`
          - **ARM64**: `${{ env.PROJECT_NAME }}-linux-arm64.tar.gz`
          
          #### macOS
          - **Intel (AMD64)**: `${{ env.PROJECT_NAME }}-darwin-amd64.tar.gz`
          - **Apple Silicon (ARM64)**: `${{ env.PROJECT_NAME }}-darwin-arm64.tar.gz`
          
          ### üîê Verification
          
          All binaries are provided with SHA256 checksums in `checksums.txt`.
          
          ### üìã Installation
          
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Make the binary executable (Unix systems): `chmod +x golin`
          4. Run: `./golin --help`
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ steps.tag.outputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup artifacts
    needs: release
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          ${{ env.PROJECT_NAME }}-windows-amd64
          ${{ env.PROJECT_NAME }}-windows-arm64
          ${{ env.PROJECT_NAME }}-linux-amd64
          ${{ env.PROJECT_NAME }}-linux-arm64
          ${{ env.PROJECT_NAME }}-darwin-amd64
          ${{ env.PROJECT_NAME }}-darwin-arm64
        failOnError: false
